name: build and upload

on:
  workflow_call:
    inputs:
      version_major:
        description: 'Which VTK version (major) are we considering'
        required: true
        type: string
      version_minor:
        description: 'Which VTK version (minor) are we considering'
        required: true
        type: string
      version_patch:
        description: 'Which VTK version (patch) are we considering'
        required: true
        type: string
      shared:
        description: 'Whether shared or static libraries shall be built'
        required: true
        type: boolean
      threads:
        description: 'Number of compilation threads'
        required: false
        type: number
        default: 4

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_OPTIONS: -DVTK_BUILD_EXAMPLES=OFF -DVTK_BUILD_TESTING=OFF -DCMAKE_VERBOSE_MAKEFILE=ON
  BUILD_TYPE: Release


jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v3

    - name: Determine release name
      uses: haya14busa/action-cond@v1
      id: release-name
      with:
        cond: ${{ inputs.shared }}
        if_true: VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}-shared
        if_false: VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}-static

    - uses: dev-drprasad/delete-tag-and-release@v0.2.0
      with:
        delete_release: true
        tag_name: ${{ steps.release-name.outputs.value }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: rickstaa/action-create-tag@v1
      id: create_tag
      with:
        tag: ${{ steps.release-name.outputs.value }}
        message: ${{ steps.release-name.outputs.value }}
        force_push_tag: true

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release-name.outputs.value }}
        release_name: ${{ steps.release-name.outputs.value }}
        draft: false
        prerelease: false

  build:
    runs-on: ${{ matrix.os }}
    needs: [create_release]
    strategy:
        matrix:
            os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v3

    - name: download VTK
      uses: suisei-cn/actions-download-file@v1.0.1
      with:
        url: https://vtk.org/files/release/${{ inputs.version_major }}.${{ inputs.version_minor }}/VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}.tar.gz
        target: ${{github.workspace}}/

    - name: Extract VTK tgz
      run: |
          tar -xvzf VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}.tar.gz
    
    - name: List files
      run: |
          ls ${{github.workspace}}
    
    - name: Create installation folder
      run: |
          mkdir -p ${{github.workspace}}/install

    - uses: actions/setup-python@v3

    - name: Install dependencies (Linux)
      run: sudo apt update && sudo apt install libopenmpi-dev libopengl-dev libglx-dev libglw-dev
      if: runner.os == 'Linux'

    - name: BUILD_SHARED_LIBS value
      uses: haya14busa/action-cond@v1
      id: BUILD_SHARED_LIBS
      with:
        cond: ${{ inputs.shared }}
        if_true: -DBUILD_SHARED_LIBS=ON
        if_false: -DBUILD_SHARED_LIBS=OFF

    - name: Configure CMake (Linux)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{env.CMAKE_OPTIONS}} ${{ steps.BUILD_SHARED_LIBS.outputs.value }} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}
      if: runner.os == 'Linux'

    - name: Configure CMake (Windows)
      run: cmake -B ${{github.workspace}}/build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{env.CMAKE_OPTIONS}} ${{ steps.BUILD_SHARED_LIBS.outputs.value }} -DVTK_MODULE_ENABLE_VTK_tiff=NO -DVTK_MODULE_ENABLE_VTK_netcdf=NO -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}
      if: runner.os == 'Windows'

    - name: Configure CMake (MacOS)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{env.CMAKE_OPTIONS}} ${{ steps.BUILD_SHARED_LIBS.outputs.value }} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}
      if: runner.os == 'MacOS'

    - name: Build
      id: build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j ${{inputs.threads}}

    - name: Install
      working-directory: ${{github.workspace}}/build
      run: cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Create tar.gz
      uses: a7ul/tar-action@v1.1.0
      with:
        command: c
        cwd: ${{github.workspace}}
        files: install/
        outPath: vtk-${{ runner.os }}-x86_64.tar.gz

    - name: Upload tar.gz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/vtk-${{ runner.os }}-x86_64.tar.gz
        asset_name: vtk-${{ runner.os }}-x86_64.tar.gz
        asset_content_type: application/zip

  build_multiarch:
    runs-on: ubuntu-22.04
    needs: [create_release]
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    strategy:
      matrix:
        include:
          - arch: armv7
            distro: ubuntu22.04
          - arch: aarch64
            distro: ubuntu22.04
          - arch: s390x
            distro: ubuntu22.04
          - arch: ppc64le
            distro: ubuntu22.04

    steps:
    - uses: actions/checkout@v2.1.0

    - name: BUILD_SHARED_LIBS value
      uses: haya14busa/action-cond@v1
      id: BUILD_SHARED_LIBS
      with:
        cond: ${{ inputs.shared }}
        if_true: -DBUILD_SHARED_LIBS=ON
        if_false: -DBUILD_SHARED_LIBS=OFF

    - name: Create folders
      run: |
          mkdir -p ${PWD}/artifacts/build
          mkdir -p ${PWD}/artifacts/install

    - name: download VTK
      uses: suisei-cn/actions-download-file@v1.0.1
      with:
        url: https://vtk.org/files/release/${{ inputs.version_major }}.${{ inputs.version_minor }}/VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}.tar.gz
        target: ${{github.workspace}}/

    - name: Extract VTK tgz
      run: |
          tar -xvzf VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}.tar.gz -C ${PWD}/artifacts/
    
    - name: List files
      run: |
          ls ${PWD}/artifacts/

    - name: Configure CMake
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}

        # Not required, but speeds up builds
        githubToken: ${{ github.token }}

        # Mount the artifacts directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}/artifacts:/artifacts"

        # Pass some environment variables to the container
        env: | # YAML, but pipe character is necessary
          version_major: ${{ inputs.version_major }}
          version_minor: ${{ inputs.version_minor }}
          version_patch: ${{ inputs.version_patch }}
          BUILD_TYPE: ${{ env.BUILD_TYPE }}            
          CMAKE_OPTIONS: ${{ env.CMAKE_OPTIONS }} ${{ steps.BUILD_SHARED_LIBS.outputs.value }}

        shell: /bin/sh

        # Install some dependencies in the container. This speeds up builds if
        # you are also using githubToken. Any dependencies installed here will
        # be part of the container image that gets cached, so subsequent
        # builds don't have to re-install them. The image layer is cached
        # publicly in your project's package repository, so it is vital that
        # no secrets are present in the container state or logs.
        install: |
          apt-get update -q -y
          apt-get install -q -y build-essential cmake curl libopenmpi-dev libopengl-dev libglx-dev libglw-dev

        run: |
          cmake -B /artifacts/build -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ${CMAKE_OPTIONS} -DCMAKE_INSTALL_PREFIX=/artifacts/install /artifacts/VTK-${version_major}.${version_minor}.${version_patch}

    - name: Build Common
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}

        # Not required, but speeds up builds
        githubToken: ${{ github.token }}

        # Mount the artifacts directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}/artifacts:/artifacts"

        # Pass some environment variables to the container
        env: | # YAML, but pipe character is necessary
          threads: ${{ inputs.threads }}
          BUILD_TYPE: ${{ env.BUILD_TYPE }}            

        shell: /bin/sh

        # Install some dependencies in the container. This speeds up builds if
        # you are also using githubToken. Any dependencies installed here will
        # be part of the container image that gets cached, so subsequent
        # builds don't have to re-install them. The image layer is cached
        # publicly in your project's package repository, so it is vital that
        # no secrets are present in the container state or logs.
        install: |
          apt-get update -q -y
          apt-get install -q -y build-essential cmake curl libopenmpi-dev libopengl-dev libglx-dev libglw-dev

        run: |
          cmake --build /artifacts/build --config ${BUILD_TYPE} -j ${threads} --target CommonColor CommonComputationalGeometry CommonCore CommonDataModel CommonExecutionModel CommonMath CommonMisc CommonSystem CommonTransforms

    - name: Build Core
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}

        # Not required, but speeds up builds
        githubToken: ${{ github.token }}

        # Mount the artifacts directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}/artifacts:/artifacts"

        # Pass some environment variables to the container
        env: | # YAML, but pipe character is necessary
          threads: ${{ inputs.threads }}
          BUILD_TYPE: ${{ env.BUILD_TYPE }}            

        shell: /bin/sh

        # Install some dependencies in the container. This speeds up builds if
        # you are also using githubToken. Any dependencies installed here will
        # be part of the container image that gets cached, so subsequent
        # builds don't have to re-install them. The image layer is cached
        # publicly in your project's package repository, so it is vital that
        # no secrets are present in the container state or logs.
        install: |
          apt-get update -q -y
          apt-get install -q -y build-essential cmake curl libopenmpi-dev libopengl-dev libglx-dev libglw-dev

        run: |
          cmake --build /artifacts/build --config ${BUILD_TYPE} -j ${threads} --target ChartsCore FiltersCore FiltersGeneral GeovisCore IOCore IOLegacy IOParallel IOParallelXML IOXML IOXMLParser ImagingCore ImagingGeneral ImagingMath ViewsCore ParallelCore RenderingCore RenderingOpenGL2

    - name: Build All
      uses: uraimo/run-on-arch-action@v2
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}

        # Not required, but speeds up builds
        githubToken: ${{ github.token }}

        # Mount the artifacts directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}/artifacts:/artifacts"

        # Pass some environment variables to the container
        env: | # YAML, but pipe character is necessary
          threads: ${{ inputs.threads }}
          BUILD_TYPE: ${{ env.BUILD_TYPE }}            

        shell: /bin/sh

        # Install some dependencies in the container. This speeds up builds if
        # you are also using githubToken. Any dependencies installed here will
        # be part of the container image that gets cached, so subsequent
        # builds don't have to re-install them. The image layer is cached
        # publicly in your project's package repository, so it is vital that
        # no secrets are present in the container state or logs.
        install: |
          apt-get update -q -y
          apt-get install -q -y build-essential cmake curl libopenmpi-dev libopengl-dev libglx-dev libglw-dev

        run: |
          cmake --build /artifacts/build --config ${BUILD_TYPE} -j ${threads}
          cmake --install /artifacts/build --config ${BUILD_TYPE}

    - name: Create tar.gz
      uses: a7ul/tar-action@v1.1.0
      with:
        command: c
        cwd: ${{github.workspace}}
        files: ${PWD}/artifacts/install/
        outPath: vtk-Linux-${{ matrix.arch }}.tar.gz

    - name: Upload tar.gz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/vtk-Linux-${{ matrix.arch }}.tar.gz
        asset_name: vtk-Linux-${{ matrix.arch }}.tar.gz
        asset_content_type: application/zip
