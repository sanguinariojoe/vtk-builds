name: build and upload

on:
  workflow_call:
    inputs:
      version_major:
        description: 'Which VTK version (major) are we considering'
        required: true
        type: string
      version_minor:
        description: 'Which VTK version (minor) are we considering'
        required: true
        type: string
      version_patch:
        description: 'Which VTK version (patch) are we considering'
        required: true
        type: string
      shared:
        description: 'Whether shared or static libraries shall be built'
        required: true
        type: boolean

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_OPTIONS: -DVTK_BUILD_EXAMPLES=OFF -DVTK_BUILD_TESTING=OFF -DCMAKE_VERBOSE_MAKEFILE=ON
  BUILD_TYPE: Release


jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v3

    - name: Determine release name
      uses: haya14busa/action-cond@v1
      id: release-name
      with:
        cond: ${{ inputs.shared }}
        if_true: VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}-shared
        if_false: VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}-static

    - uses: dev-drprasad/delete-tag-and-release@v0.2.0
      with:
        delete_release: true
        tag_name: ${{ steps.release-name.outputs.value }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: rickstaa/action-create-tag@v1
      id: create_tag
      with:
        tag: ${{ steps.release-name.outputs.value }}
        message: ${{ steps.release-name.outputs.value }}
        force_push_tag: true

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release-name.outputs.value }}
        release_name: ${{ steps.release-name.outputs.value }}
        draft: false
        prerelease: false

  build:
    runs-on: ${{ matrix.os }}
    needs: [create_release]
    strategy:
        matrix:
            os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v3

    - name: download VTK
      uses: suisei-cn/actions-download-file@v1.0.1
      with:
        url: https://www.vtk.org/files/release/${{ inputs.version_major }}.${{ inputs.version_minor }}/VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}.tar.gz
        target: ${{github.workspace}}/

    - name: Extract VTK tgz
      run: |
          tar -xvf VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}.tar.gz
    
    - name: List files
      run: |
          ls ${{github.workspace}}
    
    - name: Create installation folder
      run: |
          mkdir -p ${{github.workspace}}/install

    - uses: actions/setup-python@v3

    - name: Install dependencies (Linux)
      run: sudo apt update && sudo apt install libopenmpi-dev libopengl-dev libglx-dev libglw-dev
      if: runner.os == 'Linux'

    - name: Configure CMake (Linux)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{env.CMAKE_OPTIONS}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}
      if: runner.os == 'Linux'

    - name: Configure CMake (Windows)
      run: cmake -B ${{github.workspace}}/build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{env.CMAKE_OPTIONS}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}
      if: runner.os == 'Windows'

    - name: Configure CMake (MacOS)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{env.CMAKE_OPTIONS}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install VTK-${{ inputs.version_major }}.${{ inputs.version_minor }}.${{ inputs.version_patch }}
      if: runner.os == 'MacOS'

    - name: Build
      id: build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install
      working-directory: ${{github.workspace}}/build
      run: cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Create tar.gz
      uses: a7ul/tar-action@v1.1.0
      with:
        command: c
        cwd: ${{github.workspace}}
        files: install/
        outPath: vtk-${{ runner.os }}-x86_64.tar.gz

    - name: Upload tar.gz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/vtk-${{ runner.os }}-x86_64.tar.gz
        asset_name: vtk-${{ runner.os }}-x86_64.tar.gz
        asset_content_type: application/zip

  build_multiarch:
    runs-on: ubuntu-22.04
    needs: [create_release]
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    strategy:
      matrix:
        include:
          - arch: armv7
            distro: ubuntu22.04
          - arch: aarch64
            distro: ubuntu22.04
          - arch: s390x
            distro: ubuntu22.04
          - arch: ppc64le
            distro: ubuntu22.04

    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            ARCH: ${{ matrix.arch }}
            version_major: ${{ inputs.version_major }}
            version_minor: ${{ inputs.version_minor }}
            version_patch: ${{ inputs.version_patch }}
            BUILD_TYPE: ${{ env.BUILD_TYPE }}            
            CMAKE_OPTIONS: ${{ env.CMAKE_OPTIONS }}            

          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y build-essential cmake curl libopenmpi-dev libopengl-dev libglx-dev libglw-dev

          # Produce a binary artifact and place it in the mounted volume
          run: |
            curl https://www.vtk.org/files/release/${version_major}.${version_minor}/VTK-${version_major}.${version_minor}.${version_patch}.tar.gz
            tar -xvf VTK-${version_major}.${version_minor}.${version_patch}.tar.gz
            mkdir build
            mkdir install
            cmake -B build -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ${CMAKE_OPTIONS} -DCMAKE_INSTALL_PREFIX=install VTK-${version_major}.${version_minor}.${version_patch}
            cmake --build build --config ${BUILD_TYPE}
            cmake --install build --config ${BUILD_TYPE}
            tar -cvzf install/* vtk-Linux-${ARCH}.tar.gz
            cp vtk-Linux-${ARCH}.tar.gz /artifacts/vtk-Linux-${ARCH}.tar.gz
            echo "Produced artifact at /artifacts/vtk-Linux-${ARCH}.tar.gz"

      - name: Upload tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${PWD}/artifacts/vtk-Linux-${{ matrix.arch }}.tar.gz
          asset_name: vtk-Linux-${{ matrix.arch }}.tar.gz
          asset_content_type: application/zip
